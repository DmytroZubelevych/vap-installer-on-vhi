type: update 
name: VAP Installer Add-On
id: vap-installer-addon 
targetEditions: any 
logo: /images/logo-small.png
description: Provision VHI infrastructure and deploy a new VAP on it
baseUrl: https://raw.githubusercontent.com/jelastic/vap-installer-on-vhi/master

targetNodes:
  nodeType:
    - apache-python

globals:
  vap_dir: /var/www/webroot
  vap_settings: /var/www/webroot/.vapenv
  openstack: /opt/jelastic-python311/bin/openstack

buttons:
- caption: Configure
  action: configure
  title: Configure VHI Cluster Details
  loadingText: Configuring...
  submitButtonText: Configure
  successText: Configured successfully.
  onBeroreInit: scripts/configureOnBeforeInit.js
  
- caption: New VAP
  action: create
  loadingText: Creating VAP...
  logsPath: /var/log/installer.log
  successText: The VAP have been successfully created.
  title: New VAP
  submitButtonText: New VAP
  confirmText: Create New VAP?
  onBeroreInit: scripts/createOnBeforeInit.js

responses:
  99:
    type: warning
    message: |
      Errors were discovered during the VAP creating.
      Please check the **/var/log/installer.log** log file for details. 

onInstall:
  - cmd[cp]: |-
      echo "VAP installer add-on logs" > /var/log/installer.log;
      chown jelastic /var/log/installer.log;
    user: root

  - installOSclient
  - getScripts

actions:
  configure:
    - cmd[cp]: |-
        bash ${globals.vap_dir}/vap.sh configure \
        --project-domain=${settings.vhi_proj_domain_name} \
        --user-domain=${settings.vhi_user_domain_name} \
        --project=${settings.vhi_proj_name} \
        --username=${settings.vhi_username} \
        --password=${settings.vhi_password} \
        --url=${settings.vhi_url} \
        --vap-stack-name=${settings.vap_stack_name} \
        --format=json
    - script: |
        var resp = JSON.parse(${response.out});
        if (resp.result == 100) return { type: "warning", message: resp.out };
        if (resp.result == 99) return { result: 99 };
        return { result: 0}

  getScripts:
    cmd[cp]: |-
      wget ${baseUrl}/scripts/VAP.yaml -O ${globals.vap_dir}/VAP.yaml;
      wget ${baseUrl}/scripts/VAP_user.yaml -O ${globals.vap_dir}/VAP_user.yaml;
      wget ${baseUrl}/scripts/infra.sh -O ${globals.vap_dir}/infra.sh;
      wget ${baseUrl}/scripts/project.sh -O ${globals.vap_dir}/project.sh;
      wget ${baseUrl}/scripts/user.sh -O ${globals.vap_dir}/user.sh;
      wget ${baseUrl}/scripts/vap.sh -O ${globals.vap_dir}/vap.sh;

  installOSclient: 
    - cmd[cp]: |- 
        pip install python-openstackclient
        pip install python-heatclient

  create:
    - cmd[cp]: |-
        bash ${globals.vap_dir}/vap.sh create \
        --infra-flavor=${settings.infra_cpu_ram} \
        --user-flavor=${settings.user_cpu_ram} \
        --subnet=${settings.subnet} \
        --image=${settings.image_name} \
        --user-host-count=${settings.user_node_count} \
        --infra-root-size=${settings.infra_os_storage_size} \
        --infra-vz-size=${settings.infra_vz_storage_size} \
        --user-root-size=${settings.user_os_storage_size} \
        --user-vz-size=${settings.user_vz_storage_size} \
        --format=json
    - script: |
        var resp = JSON.parse(${response.out});
        if (resp.result == 100) return { type: "warning", message: resp.out };
        if (resp.result == 99) return { result: 99 };
        return { type: "success", message: resp.out };
